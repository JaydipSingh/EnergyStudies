#include "services_dune.fcl"


process_name: JDprotoDUNESpacePointAna

services:
{
  
  TFileService:           { fileName: "JDprotoDUNESpacePointAna.root" }

  
  TimeTracker:            {}



  message:                @local::standard_info

 
  @table::dunefd_simulation_services

} # services



source:
{
  module_type: RootInput

  # Number of events to analyze; "-1" means all of the events in the input
  # file. You can override this value with the "-n" option on the command line. 
  maxEvents:  -1 

  # I've commented this out, but if you want to include the name of
  # an art::Event input file in a script, here's how you do it.
  # fileNames: ["myinput.root"]
}

# This is empty, because we're not writing an output file with
# art::Event objects.
outputs:{}

# The 'physics' section defines and configures some modules to do work
# on each event.  First modules are defined; they are scheduled
# later. Modules are grouped by type.
physics:
{
  # Define the variables we'll need to read for this analysis program.
  analyzers:
  {
    # This name defines a job step below, and will appear as a directory 
    # in the output histogram file. 
   JDprotoDUNESpacePointAna: 
    {
      

      module_type:     "JDprotoDUNESpacePointAna"
    SimulationLabel: "largeant"

      JDSpacePointLabel: "reco3d"
      SimulationLabel: 	"largeant"
     PDGcode:		13
     BinSize: 		0.479
  
   

    }
  }



  analysis: [ JDprotoDUNESpacePointAna ]


  end_paths: [ analysis ]
}

# In order to work with the reconstructed objects I use in
# need different adjustments to handle the difference between
# simulation and reconstruction waveform times.

services.DetectorClocksService.InheritClockConfig: false
services.DetectorClocksService.TriggerOffsetTPC: -400
services.DetectorPropertiesService.NumberTimeSamples: 6400
services.DetectorPropertiesService.ReadOutWindowSize: 6400
